(function() {var implementors = {};
implementors["futures_channel"] = [{"text":"impl Display for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for TryRecvError","synthetic":false,"types":[]},{"text":"impl Display for Canceled","synthetic":false,"types":[]}];
implementors["futures_executor"] = [{"text":"impl Display for EnterError","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl Display for SpawnError","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl Display for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;T, Item&gt; Display for ReuniteError&lt;T, Item&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for ReuniteError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Reason","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Display for HeaderName","synthetic":false,"types":[]},{"text":"impl Display for InvalidHeaderName","synthetic":false,"types":[]},{"text":"impl Display for InvalidHeaderValue","synthetic":false,"types":[]},{"text":"impl Display for ToStrError","synthetic":false,"types":[]},{"text":"impl Display for Method","synthetic":false,"types":[]},{"text":"impl Display for InvalidMethod","synthetic":false,"types":[]},{"text":"impl Display for StatusCode","synthetic":false,"types":[]},{"text":"impl Display for InvalidStatusCode","synthetic":false,"types":[]},{"text":"impl Display for Authority","synthetic":false,"types":[]},{"text":"impl Display for PathAndQuery","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for Port&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for Scheme","synthetic":false,"types":[]},{"text":"impl Display for Uri","synthetic":false,"types":[]},{"text":"impl Display for InvalidUri","synthetic":false,"types":[]},{"text":"impl Display for InvalidUriParts","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for InvalidChunkSize","synthetic":false,"types":[]}];
implementors["httpdate"] = [{"text":"impl Display for HttpDate","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Display for Name","synthetic":false,"types":[]},{"text":"impl Display for InvalidNameError","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Display for LogLevel","synthetic":false,"types":[]},{"text":"impl Display for LogLevelFilter","synthetic":false,"types":[]},{"text":"impl Display for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Display for ShutdownLoggerError","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl Display for TopLevel","synthetic":false,"types":[]},{"text":"impl Display for SubLevel","synthetic":false,"types":[]},{"text":"impl Display for Attr","synthetic":false,"types":[]},{"text":"impl Display for Value","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;[Param]&gt;&gt; Display for Mime&lt;T&gt;","synthetic":false,"types":[]}];
implementors["multipart"] = [{"text":"impl&lt;'a, E:&nbsp;Display&gt; Display for LazyError&lt;'a, E&gt;","synthetic":false,"types":[]}];
implementors["native_tls"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; Display for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Any + Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_traits"] = [{"text":"impl Display for ParseFloatError","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Display for Asn1GeneralizedTimeRef","synthetic":false,"types":[]},{"text":"impl Display for Asn1TimeRef","synthetic":false,"types":[]},{"text":"impl Display for Asn1ObjectRef","synthetic":false,"types":[]},{"text":"impl Display for BigNumRef","synthetic":false,"types":[]},{"text":"impl Display for BigNum","synthetic":false,"types":[]},{"text":"impl Display for ErrorStack","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Display for HandshakeError&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Display for OpensslString","synthetic":false,"types":[]},{"text":"impl Display for OpensslStringRef","synthetic":false,"types":[]},{"text":"impl Display for X509VerifyResult","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float + Display&gt; Display for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + Display&gt; Display for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for FloatIsNan","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Display for ParseNotNanError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Display for TokenStream","synthetic":false,"types":[]},{"text":"impl Display for LexError","synthetic":false,"types":[]},{"text":"impl Display for TokenTree","synthetic":false,"types":[]},{"text":"impl Display for Group","synthetic":false,"types":[]},{"text":"impl Display for Punct","synthetic":false,"types":[]},{"text":"impl Display for Ident","synthetic":false,"types":[]},{"text":"impl Display for Literal","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Display for BernoulliError","synthetic":false,"types":[]},{"text":"impl Display for WeightedError","synthetic":false,"types":[]},{"text":"impl Display for ReadError","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl Display for TimerError","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for Unexpected&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for dyn Expected + 'a","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Value","synthetic":false,"types":[]},{"text":"impl Display for Number","synthetic":false,"types":[]}];
implementors["serde_value"] = [{"text":"impl Display for DeserializerError","synthetic":false,"types":[]},{"text":"impl Display for SerializerError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Display for Lifetime","synthetic":false,"types":[]},{"text":"impl Display for LitInt","synthetic":false,"types":[]},{"text":"impl Display for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["telegram_bot"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["telegram_bot_raw"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Body","synthetic":false,"types":[]},{"text":"impl Display for ParseMode","synthetic":false,"types":[]},{"text":"impl Display for ChatRef","synthetic":false,"types":[]},{"text":"impl Display for UserId","synthetic":false,"types":[]},{"text":"impl Display for GroupId","synthetic":false,"types":[]},{"text":"impl Display for SupergroupId","synthetic":false,"types":[]},{"text":"impl Display for ChannelId","synthetic":false,"types":[]},{"text":"impl Display for ChatId","synthetic":false,"types":[]},{"text":"impl Display for MessageId","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl Display for PathPersistError","synthetic":false,"types":[]},{"text":"impl Display for PersistError","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Display for ReuniteError","synthetic":false,"types":[]},{"text":"impl Display for JoinError","synthetic":false,"types":[]},{"text":"impl Display for TryCurrentError","synthetic":false,"types":[]},{"text":"impl Display for RecvError","synthetic":false,"types":[]},{"text":"impl Display for TryRecvError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for RecvError","synthetic":false,"types":[]},{"text":"impl Display for TryRecvError","synthetic":false,"types":[]},{"text":"impl Display for ClosedError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for TryLockError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Display, '_&gt; Display for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Display&gt; Display for OwnedMutexGuard&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for RecvError","synthetic":false,"types":[]},{"text":"impl Display for TryRecvError","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Display for RwLockReadGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Display for RwLockWriteGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Display for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Elapsed","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Display for LengthDelimitedCodecError","synthetic":false,"types":[]},{"text":"impl Display for LinesCodecError","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Display for SetGlobalDefaultError","synthetic":false,"types":[]},{"text":"impl Display for dyn Value","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Display&gt; Display for DisplayValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for Field","synthetic":false,"types":[]},{"text":"impl Display for FieldSet","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for ValueSet&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Display for Level","synthetic":false,"types":[]},{"text":"impl Display for LevelFilter","synthetic":false,"types":[]},{"text":"impl Display for ParseLevelError","synthetic":false,"types":[]},{"text":"impl Display for ParseLevelFilterError","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Display&gt; Display for UniCase&lt;S&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()